// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetBreeders.Persistence;

#nullable disable

namespace PetBreeders.Persistence.Migrations
{
    [DbContext(typeof(PetBreedersDbContext))]
    [Migration("20230214132818_initialDataSeed")]
    partial class initialDataSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PetBreeders.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BreedingId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BreedingId")
                        .IsUnique();

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BreedingId = 1,
                            City = "Warsaw",
                            Created = new DateTime(2023, 2, 14, 14, 28, 18, 85, DateTimeKind.Local).AddTicks(7850),
                            FlatNumber = "1",
                            HouseNumber = "42",
                            StatusId = 1,
                            Street = "Mickiewicza",
                            ZipCode = "11-214"
                        },
                        new
                        {
                            Id = 2,
                            BreedingId = 2,
                            City = "Cracow",
                            Created = new DateTime(2023, 2, 14, 14, 28, 18, 85, DateTimeKind.Local).AddTicks(7853),
                            FlatNumber = "8",
                            HouseNumber = "115",
                            StatusId = 1,
                            Street = "Brzozowa",
                            ZipCode = "45-124"
                        });
                });

            modelBuilder.Entity("PetBreeders.Domain.Entities.Breeding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Breedings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 2, 14, 14, 28, 18, 85, DateTimeKind.Local).AddTicks(7836),
                            Description = "Proven breeding",
                            Email = "RoyalGoldens@petbreeders.com",
                            ImageUrl = "",
                            Name = "RoyalGoldens",
                            Phone = "123456789",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 2, 14, 14, 28, 18, 85, DateTimeKind.Local).AddTicks(7839),
                            Description = "Proven breeding",
                            Email = "SnowySamoyeds@petbreeders.com",
                            ImageUrl = "",
                            Name = "SnowySamoyeds",
                            Phone = "111222333",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("PetBreeders.Domain.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BreedingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreedingId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BreedingId = 1,
                            Created = new DateTime(2023, 2, 14, 14, 28, 18, 85, DateTimeKind.Local).AddTicks(7888),
                            Description = "Związek Kynologiczny w Polsce",
                            Name = "ZKwP",
                            ReceivedDate = new DateTime(2023, 2, 14, 14, 28, 18, 85, DateTimeKind.Local).AddTicks(7886),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            BreedingId = 2,
                            Created = new DateTime(2023, 2, 14, 14, 28, 18, 85, DateTimeKind.Local).AddTicks(7891),
                            Description = "Związek Kynologiczny w Polsce",
                            Name = "ZKwP",
                            ReceivedDate = new DateTime(2023, 2, 14, 14, 28, 18, 85, DateTimeKind.Local).AddTicks(7889),
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("PetBreeders.Domain.Entities.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BreedingId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BreedingId");

                    b.ToTable("Pets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2023, 2, 14, 14, 28, 18, 85, DateTimeKind.Local).AddTicks(7700),
                            Breed = "Golden Retriever",
                            BreedingId = 1,
                            Color = "Creamy",
                            Created = new DateTime(2023, 2, 14, 14, 28, 18, 85, DateTimeKind.Local).AddTicks(7741),
                            Description = "Confident, friendly",
                            ImageUrl = "",
                            StatusId = 1,
                            Type = "Dog"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2023, 2, 14, 14, 28, 18, 85, DateTimeKind.Local).AddTicks(7744),
                            Breed = "Samoyed",
                            BreedingId = 2,
                            Color = "White",
                            Created = new DateTime(2023, 2, 14, 14, 28, 18, 85, DateTimeKind.Local).AddTicks(7745),
                            Description = "Confident, brave",
                            ImageUrl = "",
                            StatusId = 1,
                            Type = "Dog"
                        });
                });

            modelBuilder.Entity("PetBreeders.Domain.Entities.Address", b =>
                {
                    b.HasOne("PetBreeders.Domain.Entities.Breeding", "Breeding")
                        .WithOne("Address")
                        .HasForeignKey("PetBreeders.Domain.Entities.Address", "BreedingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breeding");
                });

            modelBuilder.Entity("PetBreeders.Domain.Entities.Certificate", b =>
                {
                    b.HasOne("PetBreeders.Domain.Entities.Breeding", "Breeding")
                        .WithMany("Certificates")
                        .HasForeignKey("BreedingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breeding");
                });

            modelBuilder.Entity("PetBreeders.Domain.Entities.Pet", b =>
                {
                    b.HasOne("PetBreeders.Domain.Entities.Breeding", "Breeding")
                        .WithMany("Pets")
                        .HasForeignKey("BreedingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breeding");
                });

            modelBuilder.Entity("PetBreeders.Domain.Entities.Breeding", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Certificates");

                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
